{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "867ebf45-aa79-4850-8ee1-b289fc56ae97",
   "metadata": {},
   "outputs": [],
   "source": [
    "// SPDX-License-Identifier: GPL-3.0\n",
    "\n",
    "pragma solidity >=0.7.0 < 0.9.0;\n",
    "\n",
    "contract NFTs {}\n",
    "\n",
    "contract Surprise {\n",
    "    string public reports;\n",
    "\n",
    "    constructor (string memory whatyouwant){\n",
    "        reports = whatyouwant;\n",
    "    }\n",
    "}\n",
    "\n",
    "contract BankContract {\n",
    "\n",
    "    constructor () {\n",
    "        bankAccount = BankAccount({bankAddress: msg.sender, balance: msg.sender.balance});\n",
    "    }\n",
    "\n",
    "\n",
    "    struct BankAccount {\n",
    "        address bankAddress;\n",
    "        uint256 balance;\n",
    "    }\n",
    "\n",
    "    struct User{\n",
    "        string name;\n",
    "        uint id;\n",
    "        uint256 balance;\n",
    "        address wallet;\n",
    "    }\n",
    "    \n",
    "\n",
    "    BankAccount private bankAccount;\n",
    "\n",
    "    mapping (address => User) users;\n",
    "\n",
    "    function addAccount(string memory _name, uint _id) external {\n",
    "        require(users[msg.sender].id == 0, \"Account already exist!\");\n",
    "        users[msg.sender] = User({name: _name,\n",
    "                                  id: _id,\n",
    "                                  balance: 0,\n",
    "                                  wallet: msg.sender});\n",
    "        }\n",
    "\n",
    "    function deposit(uint  _amount) external payable {\n",
    "        require(_amount > 0, \"Deposit amount is 0!\");\n",
    "        users[msg.sender].balance += _amount;\n",
    "        //payable(bankAccount.bankAddress).transfer(msg.value);\n",
    "    }\n",
    "\n",
    "    function transfer(address _to, uint _amount) external payable {\n",
    "        require(_amount > 0, \"Transfer amount is 0!\");\n",
    "        require(users[msg.sender].balance >= _amount, \"No sufficient fund!\");\n",
    "        require((users[_to].id > 0), \"Destination account DOESN'T exist!\");\n",
    "\n",
    "        users[msg.sender].balance -= _amount;\n",
    "        users[_to].balance += _amount;\n",
    "        //payable(_to).transfer(_amount);\n",
    "    }\n",
    "\n",
    "    function withdraw(uint256 _amount) external {\n",
    "        require(users[msg.sender].balance >= _amount, \"Not sufficient fund!\");\n",
    "        users[msg.sender].balance -= _amount;\n",
    "        //payable(msg.sender).transfer(_amount);\n",
    "    }\n",
    "\n",
    "\n",
    "\n",
    "    function getBankInfo() external view returns (address, uint256) {\n",
    "        require(msg.sender == bankAccount.bankAddress, \"NOT Admin\");\n",
    "        return (bankAccount.bankAddress,\n",
    "                bankAccount.balance);\n",
    "    }\n",
    "\n",
    "    function getUserInfo() external view returns(string memory,\n",
    "                                                 uint,\n",
    "                                                 uint256,\n",
    "                                                 address){\n",
    "        return (users[msg.sender].name,\n",
    "                users[msg.sender].id,\n",
    "                users[msg.sender].balance,\n",
    "                users[msg.sender].wallet);\n",
    "    }\n",
    "\n",
    "}"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
